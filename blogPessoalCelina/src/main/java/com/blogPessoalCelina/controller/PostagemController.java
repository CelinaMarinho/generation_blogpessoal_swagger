package com.blogPessoalCelina.controller;

import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.blogPessoalCelina.model.Postagem;
import com.blogPessoalCelina.repository.PostagemRepository;
import com.blogPessoalCelina.repository.TemaRepository;

@RestController /*recebe e request e responde com um HTTP Status + response do processamento (body)*/
@RequestMapping("/postagens") /*mapeia as solicita√ß√µes via URL, define a URL padr√£o do recurso(depois da /) envia a request para a classe respons√°vel pelo recurso*/
@CrossOrigin(origins = "*", allowedHeaders = "*" )
public class PostagemController {
	
	@Autowired /*A Inje√ß√£o de Depend√™ncia define quais Classes ser√£o instanciadas e em quais lugares ser√£o Injetadas quando houver necessidade.*/
	private PostagemRepository postagemRepository;                        /*e quando houver a necessidade o Spring Framework cria um novo Objeto da Classe Postagem a partir da Interface PostagemRepository, permitindo o uso de todos os M√©todos da Interface*/
    
	@Autowired
	private TemaRepository temaRepository;                                 /*Para ter acesso aos M√©t das Class Tema e TemaController, precisa inserir uma  Inje√ß√£o de Depend√™ncia do Recurso Tema logo abaixo da  Inj de Depend do Recurso Postagem.*/
	
    @GetMapping /*mapeia todas as requests GET*/                         /*mapeia todas as requisi√ß√µes get enviadas para a rota espec√≠fica dentro do recurso Postagem que ser√° respondida pelo getAll*/
	public ResponseEntity<List<Postagem>> getAll(){	                      /* retorna todos os Objetos da Classe Postagem persistidos no DB, na tabela tb_postagens.*/
    	return ResponseEntity.ok(postagemRepository.findAll());          /*executa o findAll(), retorna obj da classe Postagem dentro da LIST. A List sempre ser√° gerada (vazia ou n√£o), o M√©todo sempre retornar√° o Status 200 ü°™ OK.*/
    }
    
    @GetMapping("/{id}")                                                      /*mapeia todas as requisi√ß√µes get enviadas para a rota espec√≠fica dentro do recurso Postagem que ser√° respondida pelo getById*. Http://localhost:8080/postagens/id, onde id √© uma Vari√°vel de Caminho (Path Variable), que receber√° o id da Postagem que ser√° Consultada.*/
    public ResponseEntity<Postagem> getById(@PathVariable Long id){           /*m√©t tem um param do tipo Long(id)*/
    	
    	return postagemRepository.findById(id)                                   /*o m√©t retornar√° o obj da Postagem caso encontrado, se n√£o retorna Nulo*/
    			.map(resposta -> ResponseEntity.ok(resposta))                    /*o retorno do m√©t n√£o pode ser nulo. o map(optional) encapsula e retona se o obj est√° presente ou n√£o*. Se encontrado, insere o Objeto mapeado no Corpo da Resposta e ResponseEntity.ok(resp); e retorna o HTTP Status OKü°™200. M√©t seja declarado no mesmo lugar em que ser√° usado e a sua declara√ß√£o seja impl√≠cita*/
    			.orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());    /*N√£o encontrado = NOT_FOUND e o met build() constr√≥i a resposta com o HTTPStatus retornado*/
    }
    
    @GetMapping("/titulo/{titulo}")
    public ResponseEntity<List<Postagem>>  getByTitulo(@PathVariable String titulo) {                  /*retorna um obj da class List contendo todos os objs da class Postagem persistidos no DB, na table tb_postagens onde o atrib titulo contenha a Sting enviada com param do m√©todo */
    		return ResponseEntity.ok(postagemRepository.findAllByTituloContainingIgnoreCase(titulo));
    	
    }
    
    @PostMapping  /*responde todas as requests POST*/	                    
    public ResponseEntity<Postagem> post(@Valid @RequestBody Postagem postagem){      /*@Valid - valida o obj enviado como resposta, de acordo com as regras da Model.*/
    	if(temaRepository.existsById(postagem.getTema().getId()))
    		return ResponseEntity.status(HttpStatus.CREATED).body(postagemRepository.save(postagem));                                        /*Executa o met save(postagem) que √© o padr√£o e retorna STATUS CREATED 201 se o obj foi persistido no DB*/
    	
    		return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
    	
    }
    
    @PutMapping
    public ResponseEntity<Postagem> put(@Valid @RequestBody Postagem postagem) {
    	if (postagemRepository.existsById(postagem.getId())) {
    		
    		if (temaRepository.existsById(postagem.getTema().getId()))
    			return ResponseEntity.status(HttpStatus.OK).body(postagemRepository.save(postagem));
    		
    		return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();    		
    	}
    	
    	return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
    	
    	/*return postagemRepository.findById(postagem.getId())
    		.map(resposta -> ResponseEntity.status(HttpStatus.OK).body(postagemRepository.save(postagem)))
			.orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());*/
    }
    
    @ResponseStatus(HttpStatus.NO_CONTENT)                                            /*o m√©t ter√° uma response espec√≠fica, que em caso positivo ser√° o 203*/
    @DeleteMapping("/{id}")    
    public void delete(@PathVariable Long id) {                                      /*insere o valor passado  no endpoint para a vari√°vel de caminho id */
    	Optional<Postagem> postagem = postagemRepository.findById(id);              /*Cria um Objeto Optional - postagem -  da Classe Postagem*/ 
    	
    	if(postagem.isEmpty())
			throw new ResponseStatusException(HttpStatus.NOT_FOUND);
		postagemRepository.deleteById(id);
    	
    }
    
}
